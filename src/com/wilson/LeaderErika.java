package com.wilson;

import java.lang.ref.Cleaner;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Map;

public class LeaderErika extends Leader {
    private static final Hashtable<String, Integer> bag = new Hashtable<String, Integer>();
    private final Victreebel victreebel;
    private final Vileplume vileplume;
    private final Tangela tangela;

    public LeaderErika(Victreebel victreebel, Vileplume vileplume, Tangela tangela) {
        super(bag);
        this.victreebel = victreebel;
        this.vileplume = vileplume;
        this.tangela = tangela;
        this.addItemToBag("Potion", 2);
        this.addItemToBag("Max Potion", 1);
    }

    public Victreebel getVictreebel() {
        return victreebel;
    }

    public Vileplume getVileplume() {
        return vileplume;
    }

    public Tangela getTangela() {
        return tangela;
    }

}

class ErikaAI{

    BinaryTree binaryTree = new BinaryTree();

    public int ErikaAttackVictreebel(LeaderErika leaderErika, Victreebel victreebel, String move, String enemyType){
        /*
        / Takes attack generated by search Tree result and returns damage done by attack. If move is heal, 0 is returned.
         */
        String randomMove = null;
        switch (move) {
            case "Max Potion":
                victreebel.use_item("Max Potion");
                leaderErika.useItem("Max Potion");
                break;
            case "Vine Whip":
                return victreebel.getVineWhip().attack(enemyType);
            case "Razor Leaf":
                return victreebel.getRazorLeaf().attack(enemyType);
            case "Sleep":
                return victreebel.getSleep().attack(enemyType);
            case "Spit up":
                return victreebel.getSpitUp().attack(enemyType);
            case "Random":
                int min = 1;
                int max = 4;
                int random = (int) (Math.random() * (max - min + 1)) + min;
                switch (random) {
                    case 1:
                        randomMove = "Vine Whip";
                        break;
                    case 2:
                        randomMove = "Razor Leaf";
                        break;
                    case 3:
                        randomMove = "Spit up";
                        break;
                    case 4:
                        randomMove = "Sleep";
                        break;
                }

                return ErikaAttackVictreebel(leaderErika, victreebel, randomMove, enemyType);
        }
        return 0;
    }


    public Map<String, Integer> CreateTreeVictreebel(LeaderErika leaderErika, Victreebel victreebel, int enemyHealth, String enemyType, String enemyStatus) {
        /*
        / Creates search tree based on input of victreebels status and status of enemy. Calls ErikaAttack to determine,
        / damage done with attack. Returns hashmap with string and damage as values.
         */
        Map<String, Integer> move = new HashMap<>();
        if (victreebel.getHealth() < 20) {
            if (leaderErika.getBag().get("Max Potion") > 0) {
                binaryTree.addNode(80, "Max Potion");
            } else {
                binaryTree.addNode(0, "Max Potion");
            }
        }
        if (enemyType.equals("Ground") || enemyType.equals("Water")) {
            binaryTree.addNode(70, "Vine Whip");
            binaryTree.addNode(60, "Razor Leaf");
        } else if (enemyType.equals("Flying") || enemyType.equals("Fire")) {
            binaryTree.addNode(10, "Vine Whip");
            binaryTree.addNode(20, "Razor Leaf");
        }
        if (enemyHealth <= 10) {
            binaryTree.addNode(100, "Sleep");
        }
        if (enemyHealth <= 15) {
            binaryTree.addNode(90, "Spit up");
        }
        if (enemyStatus.equals("Normal")) {
            binaryTree.addNode(50, "Sleep");
        }
        binaryTree.addNode(40, "Random");
        move.put(binaryTree.maxValue(binaryTree.root), ErikaAttackVictreebel(leaderErika, victreebel, binaryTree.maxValue(binaryTree.root), enemyType));
        return move;
    }

    public int ErikaAttackVileplume(LeaderErika leaderErika, Vileplume vileplume, String move, String enemyType){
        /*
        / Takes attack generated by search Tree result and returns damage done by attack. If move is heal, 0 is returned.
         */
        String randomMove = null;
        switch (move) {
            case "Potion":
                vileplume.use_item("Potion");
                leaderErika.useItem("Potion");
                break;
            case "Absorb":
                return vileplume.getAbsorb().attack(enemyType);
            case "HyperBeam":
                return vileplume.getHyperBeam().attack(enemyType);
            case "StunSpore":
                return vileplume.getStunSpore().attack(enemyType);
            case "Sleep":
                return vileplume.getSleep().attack(enemyType);
            case "Random":
                int min = 1;
                int max = 4;
                int random = (int) (Math.random() * (max - min + 1)) + min;
                switch (random) {
                    case 1:
                        randomMove = "Absorb";
                        break;
                    case 2:
                        randomMove = "HyperBeam";
                        break;
                    case 3:
                        randomMove = "StunSpore";
                        break;
                    case 4:
                        randomMove = "Sleep";
                        break;
                }

                return ErikaAttackVileplume(leaderErika, vileplume, randomMove, enemyType);
        }
        return 0;
    }

    public Map<String, Integer> CreateTreeVileplume(LeaderErika leaderErika, Vileplume vileplume, int enemyHealth, String enemyType, String enemyStatus) {
         /*
        / Creates search tree based on input of vileplume status and status of enemy. Calls ErikaAttack to determine,
        / damage done with attack. Returns hashmap with string and damage as values.
         */
        Map<String, Integer> move = new HashMap<>();
        if (vileplume.getHealth() < 20) {
            if (leaderErika.getBag().get("Potion") > 1) {
                binaryTree.addNode(70, "Potion");
            } else {
                binaryTree.addNode(0, "Potion");
                binaryTree.addNode(70, "Absorb");
            }
            if (enemyType.equals("Ground") || enemyType.equals("Water")) {
                binaryTree.addNode(70, "HyperBeam");
            } else if (enemyType.equals("Flying") || enemyType.equals("Fire")) {
                binaryTree.addNode(10, "HyperBeam");
            }
            if (enemyHealth <= 10) {
                binaryTree.addNode(100, "Sleep");
            }
            if (enemyHealth <= 15) {
                binaryTree.addNode(90, "StunSpore");
            }
            if (enemyHealth <= 25){
                binaryTree.addNode(80, "Absorb");
            }
            if (!enemyStatus.equals("Normal")){
                binaryTree.addNode(60, "sleep");
                binaryTree.addNode(50, "stunSpore");
            }

            binaryTree.addNode(40, "Random");
        }
        move.put(binaryTree.maxValue(binaryTree.root), ErikaAttackVileplume(leaderErika, vileplume, binaryTree.maxValue(binaryTree.root), enemyType));
        return move;
    }

    public int ErikaAttackTangela(LeaderErika leaderErika, Tangela tangela, String move, String enemyType){
        /*
        / Takes attack generated by search Tree result and returns damage done by attack. If move is heal, 0 is returned.
         */
        String randomMove = null;
        switch (move) {
            case "Potion":
                tangela.use_item("Potion");
                leaderErika.useItem("Potion");
                break;
            case "Mega Drain":
                return tangela.getMegadrain().attack(enemyType);
            case "Constrict":
                return tangela.getConstrict().attack(enemyType);
            case "Poison Powder":
                return tangela.getPoisionPowder().attack(enemyType);
            case "Slam":
                return tangela.getSlam().attack(enemyType);
            case "Random":
                int min = 1;
                int max = 4;
                int random = (int) (Math.random() * (max - min + 1)) + min;
                switch (random) {
                    case 1:
                        randomMove = "Mega Drain";
                        break;
                    case 2:
                        randomMove = "Constrict";
                        break;
                    case 3:
                        randomMove = "Poison Powder";
                        break;
                    case 4:
                        randomMove = "Slam";
                        break;
                }

                return ErikaAttackTangela(leaderErika, tangela, randomMove, enemyType);
        }
        return 0;
    }


    public Map<String, Integer> CreateTreeTangela(LeaderErika leaderErika, Tangela tangela, int enemyHealth, String enemyType, String enemyStatus) {
         /*
        / Creates search tree based on input of Tangela status and status of enemy. Calls ErikaAttack to determine,
        / damage done with attack. Returns hashmap with string and damage as values.
         */
        Map<String, Integer> move = new HashMap<>();
        if (tangela.getHealth() < 20) {
            if (leaderErika.getBag().get("Potion") > 0) {
                binaryTree.addNode(70, "Potion");
            } else if (tangela.getMegadrain().getPp() > 0) {
                binaryTree.addNode(0, "Potion");
                binaryTree.addNode(60, "Mega Drain");
            }
            if (enemyHealth <= 25 && tangela.getConstrict().getPp() > 0) {
                binaryTree.addNode(70, "Constrict");
            }
            if (enemyHealth <= 15 && tangela.getSlam().getPp() > 0) {
                binaryTree.addNode(90, "Slam");
            }
            if (enemyHealth <= 20 && tangela.getMegadrain().getPp() > 0){
                binaryTree.addNode(80, "Mega Drain");
            }
            if (!enemyStatus.equals("Normal") && tangela.getPoisionPowder().getPp() > 0){
                binaryTree.addNode(50, "Poison Powder");
            }

            binaryTree.addNode(40, "Random");
        }
        move.put(binaryTree.maxValue(binaryTree.root), ErikaAttackTangela(leaderErika, tangela, binaryTree.maxValue(binaryTree.root), enemyType));
        return move;
    }

}

// ORDER FOR BATTLE... VILEPLUME, TANGELA, VICTREBELL