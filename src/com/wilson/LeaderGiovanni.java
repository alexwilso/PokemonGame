package com.wilson;

import java.util.HashMap;
import java.util.Hashtable;
import java.util.Map;

public class LeaderGiovanni extends Leader{
    private static final Hashtable<String, Integer> bag = new Hashtable<String, Integer>();
    private final Rhyhorn rhyhorn;
    private final Nidoqueen nidoqueen;
    private final Dugtrio dugtrio;
    private String strength;

    public LeaderGiovanni(Rhyhorn rhyhorn, Nidoqueen nidoqueen, Dugtrio dugtrio) {
        super(bag);
        this.rhyhorn = rhyhorn;
        this.nidoqueen = nidoqueen;
        this.dugtrio = dugtrio;
        this.addItemToBag("Max Potion", 3);
    }

    public String getStrength() {
        return strength; }

    public void setStrength(String strength) {
        this.strength = strength; }

    public Rhyhorn getRhyhorn() {
        return rhyhorn;
    }

    public Nidoqueen getNidoqueen() {
        return nidoqueen;
    }

    public Dugtrio getDugtrio() {
        return dugtrio;
    }
}

class GiovanniAI {
    /*
    / Responsible for determining move to be used by Leader Giovanni
     */
    BinaryTree binaryTree;
    private String opponentStatus;

    public GiovanniAI(BinaryTree binaryTree) {
        this.binaryTree = binaryTree;
    }

    public String getOpponentStatus() {
        return opponentStatus;
    }

    public void setOpponentStatus(String opponentStatus) {
        this.opponentStatus = opponentStatus;
    }

    public String moveStatus(Map<Integer, String> moveResult, int key) {
        return moveResult.get(key);
    }

    public int ReturnKeys(Map<Integer, String> moveResult) {
        // Returns damage of move
        for (Integer key : moveResult.keySet()) {
            return key;
        }
        return 0;
    }

    public int GiovanniAttackDugtrio(LeaderGiovanni leaderGiovanni, Dugtrio dugtrio, String move, String enemyType) {
        /*
        / Takes attack generated by search Tree result and returns damage done by attack. If move is heal, 0 is returned.
        / Sets pokemon status based on result of move.
         */
        String randomMove = "Random";
        Map<Integer, String> giovanniAttack;
        switch (move) {
            case "Max Potion":
                dugtrio.use_item("Max Potion");
                leaderGiovanni.useItem("Max Potion");
                setOpponentStatus("Normal");
                dugtrio.setAttackName("Max Potion");
                leaderGiovanni.setStrength("Normal");
                return 0;
            case "Dig":
                // You are calling this 3 times, you only want to call once
                giovanniAttack = dugtrio.getDig().attack(enemyType);
                setOpponentStatus(moveStatus(giovanniAttack,
                        ReturnKeys(giovanniAttack)));
                dugtrio.setAttackName("Dig");
                leaderGiovanni.setStrength(dugtrio.getDig().getStrength());
                return ReturnKeys(giovanniAttack);
            case "EarthQuake":
                giovanniAttack = dugtrio.getEarthQuake().attack(enemyType);
                setOpponentStatus(moveStatus(giovanniAttack,
                        ReturnKeys(giovanniAttack)));
                dugtrio.setAttackName("EarthQuake");
                leaderGiovanni.setStrength(dugtrio.getEarthQuake().getStrength());
                return ReturnKeys(giovanniAttack);
            case "Mud Slap":
                giovanniAttack = dugtrio.getMudslap().attack(enemyType);
                setOpponentStatus(moveStatus(giovanniAttack,
                        ReturnKeys(giovanniAttack)));
                dugtrio.setAttackName("Mud Slap");
                leaderGiovanni.setStrength(dugtrio.getMudslap().getStrength());
                return ReturnKeys(giovanniAttack);
            case "Tri Attack":
                giovanniAttack = dugtrio.getTriAttack().attack(enemyType);
                setOpponentStatus(moveStatus(giovanniAttack,
                        ReturnKeys(giovanniAttack)));
                dugtrio.setAttackName("Tri Attack");
                leaderGiovanni.setStrength(dugtrio.getTriAttack().getStrength());
                return ReturnKeys(giovanniAttack);
            case "Random":
                int min = 1;
                int max = 4;
                int random = (int) (Math.random() * (max - min + 1)) + min;
                switch (random) {
                    case 1:
                        if (dugtrio.getTriAttack().getPp() > 0) {
                            dugtrio.setAttackName("Tri Attack");
                            randomMove = "Tri Attack";
                            break;
                        }
                        break;
                    case 2:
                        if (dugtrio.getMudslap().getPp() > 0) {
                            dugtrio.setAttackName("Mud Slap");
                            randomMove = "Mud Slap";
                            break;
                        }
                        break;
                    case 3:
                        if (dugtrio.getEarthQuake().getPp() > 0) {
                            dugtrio.setAttackName("EarthQuake");
                            randomMove = "EarthQuake";
                            break;
                        }
                        break;
                    case 4:
                        if (dugtrio.getDig().getPp() > 0) {
                            dugtrio.setAttackName("Dig");
                            randomMove = "Dig";
                            break;
                        }
                        break;
                }

                return GiovanniAttackDugtrio(leaderGiovanni, dugtrio, randomMove, enemyType);
        }
        return 0;
    }

    public Map<Integer, String> CreateTreeDugtrio(LeaderGiovanni leaderGiovanni, Dugtrio dugtrio, int enemyHealth, String enemyType, String enemyStatus) {
        /*
        / Creates search tree based on input of Dugtrios status and status of enemy. Calls GiovannisAttack to determine,
        / damage done with attack. Returns hashmap with string and damage as values.
         */
        binaryTree.deleteTree();
        Map<Integer, String> move = new HashMap<>();
        if (dugtrio.getHealth() < 20) {
            if (leaderGiovanni.getBag().get("Max Potion") > 2) {
                binaryTree.addNode(90, "Max Potion");
            }
        }

        if (enemyType.equals("Rock") || enemyType.equals("Fire")) {
            if (dugtrio.getDig().getPp() > 0) {
                binaryTree.addNode(70, "Dig");
            }
            if (dugtrio.getEarthQuake().getPp() > 0) {
                binaryTree.addNode(60, "EarthQuake");
            }
        }

        if (enemyType.equals("Flying")) {
            if (dugtrio.getDig().getPp() > 0) {
                binaryTree.addNode(10, "Dig");
            }
            if (dugtrio.getEarthQuake().getPp() > 0) {
                binaryTree.addNode(20, "EarthQuake");
            }
        }

        if (enemyHealth <= 10 && dugtrio.getMudslap().getPp() > 0) {
            binaryTree.addNode(100, "Mud Slap");
        }

        if (enemyHealth <= 15 && dugtrio.getTriAttack().getPp() > 0) {
            binaryTree.addNode(95, "Tri Attack");
        }

        binaryTree.addNode(40, "Random");
        move.put(GiovanniAttackDugtrio(leaderGiovanni, dugtrio, binaryTree.maxValue(binaryTree.root), enemyType), binaryTree.maxValue(binaryTree.root));
        return move;
    }

    public int GiovanniAttackRhyhorn(LeaderGiovanni leaderGiovanni, Rhyhorn rhyhorn, String move, String enemyType) {
        /*
        / Takes attack generated by search Tree result and returns damage done by attack. If move is heal, 0 is returned.
        / Sets pokemon status based on result of move.
         */
        String randomMove = "Random";
        Map<Integer, String> giovanniAttack;
        switch (move) {
            case "Max Potion":
                rhyhorn.use_item("Max Potion");
                leaderGiovanni.useItem("Max Potion");
                setOpponentStatus("Normal");
                rhyhorn.setAttackName("Max Potion");
                leaderGiovanni.setStrength("Normal");
                return 0;
            case "Horn Attack":
                giovanniAttack = rhyhorn.getHornAttack().attack(enemyType);
                setOpponentStatus(moveStatus(giovanniAttack,
                        ReturnKeys(giovanniAttack)));
                rhyhorn.setAttackName("Horn Attack");
                leaderGiovanni.setStrength(rhyhorn.getHornAttack().getStrength());
                return ReturnKeys(giovanniAttack);
            case "EarthQuake":
                giovanniAttack = rhyhorn.getEarthQuake().attack(enemyType);
                setOpponentStatus(moveStatus(giovanniAttack,
                        ReturnKeys(giovanniAttack)));
                rhyhorn.setAttackName("EarthQuake");
                leaderGiovanni.setStrength(rhyhorn.getEarthQuake().getStrength());
                return ReturnKeys(giovanniAttack);
            case "Mega Horn":
                giovanniAttack = rhyhorn.getMegaHorn().attack(enemyType);
                setOpponentStatus(moveStatus(giovanniAttack,
                        ReturnKeys(giovanniAttack)));
                rhyhorn.setAttackName("Mega Horn");
                leaderGiovanni.setStrength(rhyhorn.getMegaHorn().getStrength());
                return ReturnKeys(giovanniAttack);
            case "Stomp":
                giovanniAttack = rhyhorn.getStomp().attack(enemyType);
                setOpponentStatus(moveStatus(giovanniAttack,
                        ReturnKeys(giovanniAttack)));
                rhyhorn.setAttackName("Stomp");
                leaderGiovanni.setStrength(rhyhorn.getStomp().getStrength());
                return ReturnKeys(giovanniAttack);
            case "Random":
                int min = 1;
                int max = 4;
                int random = (int) (Math.random() * (max - min + 1)) + min;
                switch (random) {
                    case 1:
                        if (rhyhorn.getMegaHorn().getPp() > 0) {
                            rhyhorn.setAttackName("Mega Horn");
                            randomMove = "Mega Horn";
                            break;
                        }
                        break;
                    case 2:
                        if (rhyhorn.getStomp().getPp() > 0) {
                            rhyhorn.setAttackName("Stomp");
                            randomMove = "Stomp";
                            break;
                        }
                        break;
                    case 3:
                        if (rhyhorn.getEarthQuake().getPp() > 0) {
                            rhyhorn.setAttackName("EarthQuake");
                            randomMove = "EarthQuake";
                            break;
                        }
                        break;
                    case 4:
                        if (rhyhorn.getHornAttack().getPp() > 0) {
                            rhyhorn.setAttackName("Horn Attack");
                            randomMove = "Horn Attack";
                            break;
                        }
                        break;
                }

                return GiovanniAttackRhyhorn(leaderGiovanni, rhyhorn, randomMove, enemyType);
        }
        return 0;
    }


    public Map<Integer, String> CreateTreeRhyhorn(LeaderGiovanni leaderGiovanni, Rhyhorn rhyhorn, int enemyHealth, String enemyType, String enemyStatus) {
        /*
        / Creates search tree based on input of Rhyhorns status and status of enemy. Calls GiovannisAttack to determine,
        / damage done with attack. Returns hashmap with string and damage as values.
         */
        binaryTree.deleteTree();
        Map<Integer, String> move = new HashMap<>();
        if (rhyhorn.getHealth() < 20) {
            if (leaderGiovanni.getBag().get("Max Potion") > 1) {
                binaryTree.addNode(90, "Max Potion"); } }

        if (enemyType.equals("Grass") || enemyType.equals("Ghost")) {
            if (rhyhorn.getHornAttack().getPp() > 0) {
                binaryTree.addNode(70, "Horn Attack");
            }
            if (rhyhorn.getMegaHorn().getPp() > 0) {
                binaryTree.addNode(60, "Mega Horn"); } }

        if (enemyType.equals("Rock") || enemyType.equals("Fire")) {
            if (rhyhorn.getEarthQuake().getPp() > 0) {
                binaryTree.addNode(60, "EarthQuake"); } }

        if (enemyType.equals("Flying")) {
            if (rhyhorn.getEarthQuake().getPp() > 0) {
                binaryTree.addNode(20, "EarthQuake"); } }

        if (enemyType.equals("Rock")) {
            if (rhyhorn.getHornAttack().getPp() > 0) {
                binaryTree.addNode(20, "Horn Attack"); }
            if (rhyhorn.getMegaHorn().getPp() > 0) {
                binaryTree.addNode(20, "Mega Horn"); } }

        if (enemyHealth <= 15 && rhyhorn.getStomp().getPp() > 0) {
            binaryTree.addNode(95, "Stomp");
        }

        binaryTree.addNode(40, "Random");
        move.put(GiovanniAttackRhyhorn(leaderGiovanni, rhyhorn, binaryTree.maxValue(binaryTree.root), enemyType), binaryTree.maxValue(binaryTree.root));
        return move;
    }

    public int GiovanniAttackNidoqueen(LeaderGiovanni leaderGiovanni, Nidoqueen nidoqueen, String move, String enemyType) {
        /*
        / Takes attack generated by search Tree result and returns damage done by attack. If move is heal, 0 is returned.
        / Sets pokemon status based on result of move.
         */
        String randomMove = "Random";
        Map<Integer, String> giovanniAttack;
        switch (move) {
            case "Max Potion":
                nidoqueen.use_item("Max Potion");
                leaderGiovanni.useItem("Max Potion");
                setOpponentStatus("Normal");
                nidoqueen.setAttackName("Max Potion");
                leaderGiovanni.setStrength("Normal");
                return 0;
            case "Body Slam":
                // You are calling this 3 times, you only want to call once
                giovanniAttack = nidoqueen.getBodySlam().attack(enemyType);
                setOpponentStatus(moveStatus(giovanniAttack,
                        ReturnKeys(giovanniAttack)));
                nidoqueen.setAttackName("Body Slam");
                leaderGiovanni.setStrength(nidoqueen.getBodySlam().getStrength());
                return ReturnKeys(giovanniAttack);
            case "Focus Punch":
                giovanniAttack = nidoqueen.getFocusPunch().attack(enemyType);
                setOpponentStatus(moveStatus(giovanniAttack,
                        ReturnKeys(giovanniAttack)));
                nidoqueen.setAttackName("Focus Punch");
                leaderGiovanni.setStrength(nidoqueen.getFocusPunch().getStrength());
                return ReturnKeys(giovanniAttack);
            case "Poison Sting":
                giovanniAttack = nidoqueen.getPoisonSting().attack(enemyType);
                setOpponentStatus(moveStatus(giovanniAttack,
                        ReturnKeys(giovanniAttack)));
                nidoqueen.setAttackName("Poison Sting");
                leaderGiovanni.setStrength(nidoqueen.getPoisonSting().getStrength());
                return ReturnKeys(giovanniAttack);
            case "Double Kick":
                giovanniAttack = nidoqueen.getDoubleKick().attack(enemyType);
                setOpponentStatus(moveStatus(giovanniAttack,
                        ReturnKeys(giovanniAttack)));
                nidoqueen.setAttackName("Double Kick");
                leaderGiovanni.setStrength(nidoqueen.getDoubleKick().getStrength());
                return ReturnKeys(giovanniAttack);
            case "Random":
                int min = 1;
                int max = 4;
                int random = (int) (Math.random() * (max - min + 1)) + min;
                switch (random) {
                    case 1:
                        if (nidoqueen.getPoisonSting().getPp() > 0) {
                            nidoqueen.setAttackName("Poison Sting");
                            randomMove = "Poison Sting";
                            break;
                        }
                        break;
                    case 2:
                        if (nidoqueen.getDoubleKick().getPp() > 0) {
                            nidoqueen.setAttackName("Double Kick");
                            randomMove = "Double Kick";
                            break;
                        }
                        break;
                    case 3:
                        if (nidoqueen.getFocusPunch().getPp() > 0) {
                            nidoqueen.setAttackName("Focus Punch");
                            randomMove = "Focus Punch";
                            break;
                        }
                        break;
                    case 4:
                        if (nidoqueen.getBodySlam().getPp() > 0) {
                            nidoqueen.setAttackName("Body Slam");
                            randomMove = "Body Slam";
                            break;
                        }
                        break;
                }

                return GiovanniAttackNidoqueen(leaderGiovanni, nidoqueen, randomMove, enemyType);
        }
        return 0;
    }

    public Map<Integer, String> CreateTreeNidoqueen(LeaderGiovanni leaderGiovanni, Nidoqueen nidoqueen, int enemyHealth, String enemyType, String enemyStatus) {
        /*
        / Creates search tree based on input of Nidoqueen's status and status of enemy. Calls GiovannisAttack to determine,
        / damage done with attack. Returns hashmap with string and damage as values.
         */
        binaryTree.deleteTree();
        Map<Integer, String> move = new HashMap<>();
        if (nidoqueen.getHealth() < 20) {
            if (leaderGiovanni.getBag().get("Max Potion") > 0) {
                binaryTree.addNode(90, "Max Potion"); } }

        if (enemyType.equals("Flying") || enemyType.equals("Fire")) {
            if (nidoqueen.getBodySlam().getPp() > 0) {
                binaryTree.addNode(70, "Body Slam"); }
            if (nidoqueen.getFocusPunch().getPp() > 0) {
                binaryTree.addNode(60, "Focus Punch"); } }

        if (enemyType.equals("Rock")) {
            if (nidoqueen.getBodySlam().getPp() > 0) {
                binaryTree.addNode(10, "Body Slam"); }
            if (nidoqueen.getFocusPunch().getPp() > 0) {
                binaryTree.addNode(20, "Focus Punch"); } }

        if (enemyHealth <= 10 && nidoqueen.getPoisonSting().getPp() > 0) {
            binaryTree.addNode(100, "Poison Sting"); }

        if (enemyHealth <= 15 && nidoqueen.getDoubleKick().getPp() > 0) {
            binaryTree.addNode(95, "Double Kick"); }

        binaryTree.addNode(40, "Random");
        move.put(GiovanniAttackNidoqueen(leaderGiovanni, nidoqueen, binaryTree.maxValue(binaryTree.root), enemyType), binaryTree.maxValue(binaryTree.root));
        return move;
    }
}